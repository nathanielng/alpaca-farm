#!/usr/bin/env python

"""
A command line utility that processes input from stdin and prints the result.

This script accepts input via stdin (pipe or redirect) and processes it using
the my_function() subroutine. If no input is provided, it prints a message.

Example usage:
    echo "test" | python script.py
    cat input.txt | python script.py
    python script.py < input.txt
"""

import argparse
import logging

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(levelname)s | %(name)s | %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# Use-case specific code & subroutines go here
def process_input(input):
    """
    Your use-case-specific subroutine

    Args:
        input (str): The input string to process

    Returns:
        str: output generated by your subroutine
    """
    return f'Your input was: {input}'

# Code for handling input from stdin goes here
def main(stdin_input, args):
    print(process_input(stdin_input))

def get_stdin():
    # Check if stdin is connected to a terminal (interactive) or a pipe/file
    if sys.stdin.isatty():
        return ''  # Interactive terminal - no piped input
    else:
        return sys.stdin.read().strip()  # Input is being piped or redirected

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    # parser.add_argument('--example_argument', type=str)
    # parser.add_argument('--example_flag', action='store_true')
    args = parser.parse_args()

    stdin_input = get_stdin()
    if stdin_input:
        main(stdin_input, args)
    else:
        print("No input provided")
