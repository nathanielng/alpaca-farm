#!/usr/bin/env python

"""
A command line utility that processes input from stdin using Strands Agent.

This script accepts input via stdin (pipe or redirect) and processes it using
a Strands Agent with Bedrock model. If no input is provided, it prints a message.

Example usage:
    echo "test" | python template-strands-unix.py
    cat input.txt | python template-strands-unix.py
    python template-strands-unix.py < input.txt
"""

import argparse
import logging
import os
import sys

from botocore.config import Config
from strands import Agent, tool
from strands.handlers.callback_handler import PrintingCallbackHandler
from strands.models.bedrock import BedrockModel
from strands.tools.mcp.mcp_client import MCPClient

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(levelname)s | %(name)s | %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)
logging.getLogger("strands").setLevel(logging.INFO)

# Use-case specific code & subroutines go here
HOME = os.getenv('HOME')
BEDROCK_REGION = os.getenv("BEDROCK_REGION", 'us-west-2')
BEDROCK_MODEL_ID = "us.amazon.nova-lite-v1:0"

model = BedrockModel(
    model_id = BEDROCK_MODEL_ID,
    max_tokens = 2048,
    boto_client_config = Config(
        read_timeout = 120,
        connect_timeout = 120,
        retries = dict(max_attempts=3, mode="adaptive"),
    ),
    temperature = 0.1
)

SYSTEM_PROMPT = """..."""
tools = []

def process_input(input):
    """
    Process input using Strands Agent

    Args:
        input (str): The input string to process

    Returns:
        str: output generated by the agent
    """
    aws_agent = Agent(
        system_prompt = SYSTEM_PROMPT,
        model = model,
        tools = tools,
        callback_handler = PrintingCallbackHandler()
    )
    return aws_agent(input)

# Code for handling input from stdin goes here
def main(stdin_input, args):
    print(process_input(stdin_input))

def get_stdin():
    # Check if stdin is connected to a terminal (interactive) or a pipe/file
    if sys.stdin.isatty():
        return ''  # Interactive terminal - no piped input
    else:
        return sys.stdin.read().strip()  # Input is being piped or redirected

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    # parser.add_argument('--example_argument', type=str)
    # parser.add_argument('--example_flag', action='store_true')
    args = parser.parse_args()

    stdin_input = get_stdin()
    if stdin_input:
        main(stdin_input, args)
    else:
        print("No input provided")
